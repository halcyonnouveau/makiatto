name: CI

permissions:
  pull-requests: write
  contents: write

env:
  CARGO_TERM_COLOR: always

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs.yml"
  pull_request:
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Run tests
        run: |
          cargo build
          cargo nextest run --workspace --exclude integration-tests --retries 2

  integration-tests:
    name: Integration/e2e tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Build makiatto-builder image
        run: docker build -f tests/dockerfiles/makiatto_builder.Dockerfile -t makiatto-builder:latest .
      - name: Build ubuntu_base image
        run: docker build -f tests/dockerfiles/ubuntu_base.Dockerfile -t makiatto-test-ubuntu_base:latest .
      - name: Build ubuntu_daemon image
        run: docker build -f tests/dockerfiles/ubuntu_daemon.Dockerfile -t makiatto-test-ubuntu_daemon:latest .
      - name: Extract makiatto binary from builder
        run: |
          mkdir -p target/tests
          docker run --rm -v $PWD/target/tests:/output makiatto-builder:latest sh -c "cp /makiatto /output/"
          sudo chown -R $USER:$USER target/
      - name: Fix SSH key permissions
        run: chmod 600 tests/fixtures/.ssh/id_ed25519
      - name: Run integration/e2e tests
        run: cargo nextest run --package integration-tests --retries 4

  clippy:
    name: Check for common code mistakes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --workspace --tests -- -D warnings

  fmt:
    name: Check code format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Run rustfmt
        run: cargo +nightly fmt --all -- --check

  # Create a PR with the new versions and changelog, preparing the next release.
  release-plz-pr:
    name: Release-plz PR
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [unit-tests, integration-tests, clippy, fmt]
    runs-on: ubuntu-latest
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      - name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

  # Release unpublished packages.
  release-plz-release:
    name: Release-plz release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [unit-tests, integration-tests, clippy, fmt]
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      - name: Run release-plz
        id: release
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
